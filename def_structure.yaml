title: レガシーコードのテスト容易性向上のための依存性注入ワークフロー

sections:
  - name: 分析フェーズ
    number: 1
    description: 依存関係の分析と評価を行い、改善の方向性を決定する
    output: 依存性評価レポート
    subsections:
      - name: 依存関係の特定
        number: 1.1
        items:
          - クラス間の依存関係を可視化
          - 外部システムやフレームワークへの依存を特定
          - テスト困難な依存関係をリストアップ
      - name: 複雑度評価
        number: 1.2
        items:
          - 結合度（高・中・低）の評価
          - パラメータの数と複雑さの分析
          - 依存関係の種類（直接・間接）の分類
      - name: リスク評価
        number: 1.3
        items:
          - テストの阻害度
          - 変更の頻度
          - 他のコードへの影響範囲
          - 改善コストの見積もり

  - name: 戦略決定フェーズ
    number: 2
    description: 分析結果に基づいて具体的な改善戦略を決定する
    input: 依存性評価レポート
    output: リファクタリング計画
    subsections:
      - name: パターン選択
        number: 2.1
        patterns:
          - name: パラメータ注入パターン
            conditions:
              - 結合度：低
              - 単純な依存関係
              - 少数のパラメータ
            files:
              - refactoring-patterns/1-parameter-injection/1-parameter-adaptation.md
              - refactoring-patterns/1-parameter-injection/12-constructor-parameterization.md
              - refactoring-patterns/1-parameter-injection/13-method-parameterization.md
              - refactoring-patterns/1-parameter-injection/14-parameter-primitivization.md
          
          - name: インターフェース抽象化パターン
            conditions:
              - 結合度：中
              - 複数の実装が必要
              - テスト用モックが必要
            files:
              - refactoring-patterns/2-interface-abstraction/8-implementation-extraction.md
              - refactoring-patterns/2-interface-abstraction/9-interface-extraction.md
              - refactoring-patterns/2-interface-abstraction/15-method-and-variable-elevation.md
              - refactoring-patterns/2-interface-abstraction/16-dependency-push-out.md
          
          - name: オブジェクト生成パターン
            conditions:
              - 結合度：高
              - 複雑なオブジェクト生成ロジック
              - 生成と使用の分離が必要
            files:
              - refactoring-patterns/3-object-creation/6-factory-method-extraction-and-override.md
              - refactoring-patterns/3-object-creation/2-method-object-extraction.md
              - refactoring-patterns/3-object-creation/18-subclassing-and-method-override.md
          
          - name: グローバル・静的依存管理パターン
            conditions:
              - 結合度：最高
              - グローバル変数や静的メソッドへの依存
              - Singletonパターンの使用
            files:
              - refactoring-patterns/4-global-static-management/3-global-reference-encapsulation.md
              - refactoring-patterns/4-global-static-management/4-static-method-exposure.md
              - refactoring-patterns/4-global-static-management/11-static-set-method-introduction.md
              - refactoring-patterns/4-global-static-management/17-global-reference-replacement-with-get-method.md
          
          - name: 委譲とカプセル化パターン
            conditions:
              - 結合度：複合
              - 複数の依存関係が混在
              - 段階的なリファクタリングが必要
            files:
              - refactoring-patterns/5-delegation-encapsulation/5-call-extraction-and-override.md
              - refactoring-patterns/5-delegation-encapsulation/7-get-method-extraction-and-override.md
              - refactoring-patterns/5-delegation-encapsulation/10-instance-delegation-introduction.md

      - name: 実装アプローチ決定
        number: 2.2
        items:
          - name: 段階的アプローチ
            conditions:
              - 影響範囲が広い
              - リスクが高い
              - 複数の依存関係が絡む
            steps:
              - 優先順位付けと分割
              - 段階的な改善計画の策定
              - マイルストーンの設定
          - name: 直接リファクタリング
            conditions:
              - 影響範囲が限定的
              - リスクが低い
              - 依存関係が単純
            steps:
              - パターンの直接適用
              - 一括改善の実施
              - 迅速な検証

      - name: リスク軽減策の策定
        number: 2.3
        items:
          - バックアップと復旧計画
          - 段階的なコミット戦略
          - テスト計画の立案
          - モニタリング方針の決定

  - name: 実装フェーズ
    number: 3
    description: 決定された戦略に基づいて実際のコード変更を行う
    input: リファクタリング計画
    output: 変更されたコード
    subsections:
      - name: コード変換
        number: 3.1
        steps:
          - 依存関係の分離
          - インターフェースの導入
          - テスト容易性の向上
          - コードの最適化
      
      - name: テストコード作成
        number: 3.2
        steps:
          - ユニットテストの作成
          - モックオブジェクトの実装
          - テストケースの設計
          - エッジケースの考慮

      - name: レビュー
        number: 3.3
        steps:
          - コードレビュー
          - テストカバレッジの確認
          - パフォーマンスレビュー
          - セキュリティレビュー

  - name: 検証フェーズ
    number: 4
    description: 実装された変更の品質を確認する
    input: 変更されたコード
    output: テストレポート
    subsections:
      - name: ユニットテスト実行
        number: 4.1
        steps:
          - 全テストケースの実行
          - カバレッジの測定
          - 失敗テストの分析
          - バグ修正の実施

      - name: 統合テスト実行
        number: 4.2
        steps:
          - 結合テストの実行
          - システムテストの実行
          - エンドツーエンドテスト
          - 回帰テストの実施

      - name: パフォーマンス検証
        number: 4.3
        steps:
          - 性能測定
          - メモリ使用量の確認
          - スケーラビリティテスト
          - ボトルネック分析

  - name: 完了フェーズ
    number: 5
    description: プロジェクトの完了と知見の蓄積を行う
    input: テストレポート
    output: 完了レポート
    subsections:
      - name: 文書化
        number: 5.1
        items:
          - 変更内容の記録
          - パターン適用の結果
          - 問題点と解決策
          - 今後の課題

      - name: メトリクス収集
        number: 5.2
        items:
          - コード品質指標
          - テストカバレッジ
          - パフォーマンス指標
          - 保守性指標

      - name: フィードバック整理
        number: 5.3
        items:
          - 成功点の抽出
          - 改善点の特定
          - ベストプラクティスの更新
          - 次回への提言 